1. How many cost units are spent in the entire process of performing 40 consecutive push
operations on an empty array which starts out at capacity 8, assuming that the array
will double in capacity each time a new item is added to an already full dynamic array?
As N (ie. the number of pushes) grows large, under this strategy for resizing, what is
the big-oh complexity for a push?

Operations:
Op [1 - 8] = 8 units
Op 9 = 8 + 1 = 9 units (new cap 16)
Op [10 - 16] = 7 units
Op 17 = 16 + 1 = 17 units (new cap 32)
Op [18 - 32] = 15 units
Op 33 = 32 + 1 = 33 units (new cap 64)
Op [34 - 40] = 6 units

Total units = 95
The big-oh complexity for a push is O(1)+. However as the number of pushes grows larger
and the process capacity keeps expanding, reallocating the array becomes increasingly
slower and a single push operation (if requiring resizing) could be drastically longer;
This would be worst case O(n).


2. How many cost units are spent in the entire process of performing 40 consecutive push
operations on an empty array which starts out at capacity 8, assuming that the array
will grow by a constant 2 spaces each time a new item is added to an already full
dynamic array? As N (ie. the number of pushes) grows large, under this strategy for
resizing, what is the big-oh complexity for a push?

If the capacity increases by every other insertion, it's easier to count even/odd; Odds
will resize (full amount) while evens won't resize (count 1):
Op [1 - 8] = 8 units
Op 9 = 8 + 1 = 9 units (new cap 10)
Op 10 = 1 unit
Op 11 = 10 + 1 = 11 units (new cap 12)
Op 12 = 1 unit
Op 13 = 12 + 1 = 13 units (new cap 14)
Op 14 = 1 unit
Op 15 = 14 + 1 = 11 units (new cap 16)
Op 16 = 1 unit
Op 17 = 16 + 1 = 13 units (new cap 18)
...

Odds: 9 + 11 + 13 + 15 + 17 + 19 + 21 + 23 . . . + 39 = 384
Evens: 8 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 . . . + 1 = 24
Total units = 408

The big-oh complexity for a push is linear O(n)+
